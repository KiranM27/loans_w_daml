module Test.LoanRepaymentTest where

import Daml.Script
import DA.Assert
import DA.Date 
import DA.Time 
import DA.Optional

import LoanRequestWithLoanLimit
import LoanWithRepayment
import LoanLimitWithRepayment
import TokenAccountWithKey
import RepaymentRestriction

testLoanRepaymentWorkflow : Script ()
testLoanRepaymentWorkflow = script do
  -- Setup parties
  bank <- allocateParty "Bank"
  borrower <- allocateParty "Borrower"
  
  -- Create RepaymentRestriction
  repaymentRestrictionCid <- submit bank do
    createCmd RepaymentRestriction with
      bank = bank
      borrower = borrower
      minRepaymentAmount = 100.0

  -- Create LoanLimit
  let loanLimitAmount = 10000.0
  loanLimitCid <- submit bank do
    createCmd LoanLimitWithRepayment with
      bank = bank
      totalLimit = loanLimitAmount
      usedAmount = 0.0


  -- Borrower creates a loan request
  loanRequestCid <- submit borrower do
    createCmd LoanRequestWithLoanLimit with
      borrower = borrower
      bank = bank
      amount = 5000.0

  -- Bank approves the LoanRequest, returns (loanCid, updatedLoanLimitCid)
  (loanCid, updatedLoanLimitCid) <- submit bank do
    exerciseCmd loanRequestCid ApproveRequest with
      loanLimitCid = loanLimitCid 

  -- Create TokenAccount for borrower
  tokenAccountCid <- submit borrower do
    createCmd TokenAccountWithKey with
      owner = borrower
      issuer = bank
      balance = 10000.0  -- Ensure borrower has enough balance to repay


  -- Disburse 2000 tokens to the borrower's account
  (updatedLoanCid, newTokenAccountCid) <- submitMulti [borrower, bank] [] $
      exerciseCmd loanCid Disburse with
          tokenAccountCid = tokenAccountCid
          disburseAmount = 2000.0

  -- Create a Payment Restriction - should be 10% of the loan amount 
  paymentRestrictionCid <- submit bank do
    createCmd RepaymentRestriction with
      bank = bank
      borrower = borrower
      minRepaymentAmount = 500.0

  -- Test partial repayment
  let partialRepaymentAmount = 2000.0
  (loanCid', tokenAccountCid') <- submit borrower do
    exerciseCmd updatedLoanCid Repay with
      repaymentRestrictionCid = repaymentRestrictionCid
      repaymentAmount = partialRepaymentAmount
      tokenAccountCid = tokenAccountCid

  -- Verify partial repayment
  Some loan <- queryContractId borrower loanCid'
  assertMsg "Total repaid should be 2000" (loan.repaidAmount == 2000.0)
  assertMsg "Disbursed amount should be 2000" (loan.disbursedAmount == 2000.0)
  assertMsg "Repaid amount should be the same as the disbursed amount" (loan.repaidAmount == loan.disbursedAmount)

  return ()
