module Test.LoanLimitUpdateTest where

import Daml.Script
import LoanLimit

testLoanLimitUpdate : Script ()
testLoanLimitUpdate = script do
    -- Allocate party
    bank <- allocatePartyWithHint "Bank" (PartyIdHint "bank")

    -- Create a LoanLimit contract
    loanLimitCid <- submit bank do
        createCmd LoanLimit with
            bank = bank
            totalLimit = 10000.0
            usedAmount = 0.0

    -- Test 1: Update used amount within the limit
    updatedLoanLimitCid1 <- submit bank do
        exerciseCmd loanLimitCid UpdateUsedAmount with amountToAdd = 5000.0

    -- Verify the updated used amount
    Some updatedLoanLimit1 <- queryContractId @LoanLimit bank updatedLoanLimitCid1
    assertMsg "Used amount should be 5000.0" (updatedLoanLimit1.usedAmount == 5000.0)

    -- Test 2: Update used amount to reach the limit
    updatedLoanLimitCid2 <- submit bank do
        exerciseCmd updatedLoanLimitCid1 UpdateUsedAmount with amountToAdd = 5000.0

    -- Verify the updated used amount
    Some updatedLoanLimit2 <- queryContractId @LoanLimit bank updatedLoanLimitCid2
    assertMsg "Used amount should be 10000.0" (updatedLoanLimit2.usedAmount == 10000.0)

    -- Test 3: Attempt to exceed the limit (should fail)
    submitMustFail bank do
        exerciseCmd updatedLoanLimitCid2 UpdateUsedAmount with amountToAdd = 1.0

    return ()
